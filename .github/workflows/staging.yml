# This is a basic workflow to help you get started with Actions

name: staging

# Controls when the action will run. 
on:
  # Build every 7 days
  schedule:
    - cron: "0 0 * * 0"
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, runner ]
    paths: [ '**staging.yml' ]
  pull_request:
    branches: [ master, runner ]
    paths: [ '**staging.yml' ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build-staging"
  build-staging:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Prerequisites
        run: |
          # Packages
          sudo apt install -y pcregrep
          # Builder
          wget -q "https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.0.3/appimage-builder-1.0.3-x86_64.AppImage" -O appimage-builder
          chmod +x appimage-builder
          ./appimage-builder --appimage-extract
          rm appimage-builder
          mv squashfs-root appimage-builder
          # Icon
          mkdir -p /usr/share/icons/hicolor/scalable/ ; cp doc/logo-wine.svg /usr/share/icons/hicolor/scalable/wine.svg

      # Get wine version
      - name: Version
        id: version
        run: |
          version_wine="$(wget -qO- https://dl.winehq.org/wine-builds/ubuntu/dists/bionic/main/binary-amd64/ | grep wine-staging | sed 's|_| |g;s|~| |g' | awk '{print $5}' | tail -n1)"
          echo "version_wine=$version_wine" >> $GITHUB_ENV
          echo "version_wine=$version_wine" >> $GITHUB_OUTPUT

      # Runs a set of commands using the runners shell
      - name: Build appimage
        run: |
          # add dir dist
          mkdir dist

          ./appimage-builder/AppRun --recipe wine-staging.yml
          mv *.AppImage dist/wine-staging-${{ env.version_wine }}-continuous-x86_64.AppImage

      # # Creates prefix
      # - name: Wine Prefix
      #   run: |
      #     # wine64
      #     mkdir wine
      #     export WINEPREFIX="$(pwd)/wine"
      #     export WINEARCH="win64"
      #     unset DISPLAY
      #     dist/wine-staging-${{ env.version_wine }}-continuous-x86_64.AppImage --appimage-extract
      #     squashfs-root/AppRun winetricks fontsmooth=rgb
      #     squashfs-root/AppRun winetricks dxvk
      #     rm -rf squashfs-root
      #     rm -rf wine/drive_c/users/runner
      #     tar -cf wineprefix-64.tar wine
      #     rm -rf wine
      #     xz -z9ev wineprefix-64.tar
      #     mv wineprefix-64.tar.xz dist/
      #     # wine32
      #     mkdir wine
      #     export WINEPREFIX="$(pwd)/wine"
      #     export WINEARCH="win32"
      #     unset DISPLAY
      #     dist/wine-staging-${{ env.version_wine }}-continuous-x86_64.AppImage --appimage-extract
      #     squashfs-root/AppRun winetricks fontsmooth=rgb
      #     squashfs-root/AppRun winetricks dxvk
      #     rm -rf squashfs-root
      #     rm -rf wine/drive_c/users/runner
      #     tar -cf wineprefix-32.tar wine
      #     xz -z9ev wineprefix-32.tar
      #     mv wineprefix-32.tar.xz dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: wine-staging
          path: 'dist'

  release-staging:
      needs: [build-staging]
      runs-on: ubuntu-latest

      steps:
        - uses: actions/download-artifact@v1
          with:
            name: wine-staging

        - name: release
          uses: marvinpinto/action-automatic-releases@latest
          with:
            title: Continuous build (staging)
            automatic_release_tag: continuous-staging
            prerelease: false
            draft: false
            files: |
              wine-staging
            repo_token: ${{ secrets.GITHUB_TOKEN }}
