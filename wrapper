#!/usr/bin/env bash

######################################################################
# @author      : Ruan E. Formigoni (ruanformigoni@gmail.com)
# @file        : wrapper
# @created     : Saturday Jan 21, 2023 19:00:53 -03
######################################################################

set -e

# WINE env
export WINEPREFIX=${WINEPREFIX:-"$HOME/.wine-appimage"}
export WINEDEBUG=${WINEDEBUG:-"fixme-all"}

# DXVK env
export DXVK_HUD=${DXVK_HUD:-"0"}
export DXVK_LOG_LEVEL=${DXVK_LOG_LEVEL:-"none"}
export DXVK_STATE_CACHE=${DXVK_STATE_CACHE:-"0"}

# Create WINEPREFIX
mkdir -p "$WINEPREFIX"

# check gpu vendor
if command -v glxinfo &>/dev/null; then
  VENDOR=$(glxinfo -B | grep "OpenGL vendor")
  VENDOR=${VENDOR,,}
  echo "GPU Vendor: $VENDOR"
fi

# Set ICD folder
export ICD="${ICD:-$WINEPREFIX/icd.d}"

# Copy ICD files
mkdir -p "$ICD"
cp "$APPDIR"/usr/share/vulkan/icd.d/* "$ICD"

# Patch driver path
if [[ "$VENDOR" =~ intel ]]; then
  export VK_ICD_FILENAMES="$ICD/intel_icd.i686.json:$ICD/intel_icd.x86_64.json"
  sed -i "s|/usr|$APPDIR/usr|" "$ICD/intel_icd.i686.json"
  sed -i "s|/usr|$APPDIR/usr|" "$ICD/intel_icd.x86_64.json"
elif [[ "$VENDOR" =~ nvidia ]]; then
  export VK_ICD_FILENAMES="$ICD/nvidia_icd.json"
  sed -i "s|/usr|$APPDIR/usr|" "$ICD/nvidia_icd.json"
elif [[ "$VENDOR" =~ radeon ]] || [[ "$VENDOR" =~ amd ]]; then
  export VK_ICD_FILENAMES="$ICD/radeon_icd.i686.json:$ICD/radeon_icd.x86_64.json"
  sed -i "s|/usr|$APPDIR/usr|" "$ICD/radeon_icd.i686.json"
  sed -i "s|/usr|$APPDIR/usr|" "$ICD/radeon_icd.x86_64.json"
fi

# Log vulkan info
if command -v vulkaninfo &>/dev/null; then
  vulkaninfo &>"$WINEPREFIX/vulkan.log"
  echo "Written vulkan info to $WINEPREFIX/vulkan.log"
fi

# Set LD_LIBRARY_PATH
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$APPDIR/usr/lib/i386-linux-gnu"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$APPDIR/usr/lib/x86_64-linux-gnu"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$APPDIR/usr/lib"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$APPDIR/usr/lib64"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$APPDIR/runtime/compat/lib/x86_64-linux-gnu"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$APPDIR/runtime/compat/lib/i386-linux-gnu"

# CI_PLACEHOLDER

# Allow the AppImage to be symlinked to e.g., /usr/bin/wineserver
if [ -n "$APPIMAGE" ] ; then
  BINARY_NAME=$(basename "$ARGV0")
else
  BINARY_NAME=$(basename "$0")
fi

# Check for symlink
if   read -r MAIN < <(find "$APPDIR/bin" "$APPDIR/usr/bin" -iname "$BINARY_NAME" -print -quit); then
  echo "$BINARY_NAME: '$MAIN $*'"
# Check for binary in usr/bin and bin
elif read -r MAIN < <(find "$APPDIR/bin" "$APPDIR/usr/bin" -iname "$(basename "${1##*-}")" -print -quit); then
  shift
  echo "$BINARY_NAME: '$MAIN $*'"
# Check for wine binaries in usr/bin and bin
elif read -r MAIN < <(find "$APPDIR/bin" "$APPDIR/usr/bin" \( -iname "wine" -o -iname "wine64" \) -print -quit); then
  LD_TRACE_LOADED_OBJECTS=1 $MAIN --version
  echo "$BINARY_NAME: '$MAIN $*'"
else
  echo "ERR:wine binaries not found"
  exit 1
fi

"$MAIN" "$@"
