# This is a basic workflow to help you get started with Actions

name: ge

# Controls when the action will run. 
on:
  # Build every 7 days
  schedule:
    - cron: "0 0 * * 0"
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, runner ]
    paths: [ '**ge.yml' ]
  pull_request:
    branches: [ master, runner ]
    paths: [ '**ge.yml' ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build-ge"
  build-ge:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Prerequisites
        run: |
          # Packages
          sudo apt install -y pcregrep patchelf git
          # Create build dir
          git clone https://github.com/ruanformigoni/wine.git build && cd build
          # Get appimagebuilder
          wget -q "https://github.com/AppImageCrafters/appimage-builder/releases/download/Continuous/appimage-builder-1.1.1.dev32+g2709a3b-x86_64.AppImage" -O appimage-builder
          chmod +x appimage-builder
          ./appimage-builder --appimage-extract
          rm appimage-builder
          mv squashfs-root appimage-builder

      # Get wine version
      - name: Version
        id: version
        run: |
          chmod +x fetch.sh
          version_wine="$(./fetch.sh ge --version)"
          echo "version_wine=$version_wine" >> $GITHUB_ENV
          echo "version_wine=$version_wine" >> $GITHUB_OUTPUT

      # Builds the appimage
      - name: Build appimage
        run: |
          # add dir dist
          mkdir dist

          # Enter build dir
          cd build

          # Select ge
          sed -i 's/BOTTLES_RUNNER/ge/' ../wine-bottles.yml

          ./appimage-builder/AppRun --recipe ../wine-bottles.yml
          mv *.AppImage ../dist/wine-ge-${{ env.version_wine }}-continuous-x86_64.AppImage
          mv *.AppImage.zsync ../dist/wine-ge-${{ env.version_wine }}-continuous-x86_64.AppImage.zsync

          cd .. && rm -rf build

      # Builds the appimage with portable glibc for wine
      - name: Build glibc-i686 appimage
        run: |
          # Create and enter build dir
          git clone https://github.com/ruanformigoni/wine.git build && cd build
          # Fetch
          chmod +x fetch.sh && ./fetch.sh "ge"
          # add patch
          ../patch.sh ../dist/wine-ge-${{ env.version_wine }}-continuous-x86_64.AppImage

          mv *.AppImage ../dist/wine-ge-${{ env.version_wine }}-continuous-x86_64-portable-glibc-i386.AppImage

      # Creates prefix
      - name: Wine Prefix
        run: |
          # wine64
          mkdir wine
          export WINEPREFIX="$(pwd)/wine"
          export WINEARCH="win64"
          unset DISPLAY
          dist/wine-ge-${{ env.version_wine }}-continuous-x86_64.AppImage --appimage-extract
          squashfs-root/AppRun winetricks fontsmooth=rgb
          squashfs-root/AppRun winetricks dxvk
          rm -rf squashfs-root
          rm -rf wine/drive_c/users/runner
          tar -cf wineprefix-64.tar wine
          rm -rf wine
          xz -z9ev wineprefix-64.tar
          mv wineprefix-64.tar.xz dist/
          # wine32
          mkdir wine
          export WINEPREFIX="$(pwd)/wine"
          export WINEARCH="win32"
          unset DISPLAY
          dist/wine-ge-${{ env.version_wine }}-continuous-x86_64.AppImage --appimage-extract
          squashfs-root/AppRun winetricks fontsmooth=rgb
          squashfs-root/AppRun winetricks dxvk
          rm -rf squashfs-root
          rm -rf wine/drive_c/users/runner
          tar -cf wineprefix-32.tar wine
          xz -z9ev wineprefix-32.tar
          mv wineprefix-32.tar.xz dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: wine-ge
          path: 'dist'

    outputs:
      version: ${{ steps.version.outputs.version_wine }}


  release-ge:
      needs: [build-ge]
      runs-on: ubuntu-latest

      steps:
        - uses: actions/download-artifact@v1
          with:
            name: wine-ge

        - name: release
          uses: marvinpinto/action-automatic-releases@latest
          with:
            title: Continuous ge ${{ needs.build-ge.outputs.version }}
            automatic_release_tag: continuous-ge
            prerelease: false
            draft: false
            files: |
              wine-ge
            repo_token: ${{ secrets.GITHUB_TOKEN }}

